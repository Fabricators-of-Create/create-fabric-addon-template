//file:noinspection GroovyAssignabilityCheck
//file:noinspection GroovyAccessibility
//file:noinspection GradlePackageVersionRange
plugins {
	id "fabric-loom" version "0.12-SNAPSHOT"
	id "io.github.juuxel.loom-quiltflower" version "1.+" // Quiltflower, a better decompiler
	id "org.quiltmc.quilt-mappings-on-loom" version "4.2.0" // Quilt Mappings, for parameters and javadoc. Also hashed mojmap.
	id "maven-publish"
}

sourceCompatibility = JavaVersion.VERSION_17
targetCompatibility = JavaVersion.VERSION_17

archivesBaseName = project.archives_base_name
version = project.mod_version
group = project.maven_group

ext.buildNumber = System.getenv("GITHUB_RUN_NUMBER")
if (buildNumber != null) {
	version += "+$buildNumber"
}

repositories {
	maven { url = "https://api.modrinth.com/maven" } // LazyDFU, Suggestion Tweaker
	maven { url = "https://maven.terraformersmc.com/releases/" } // Mod Menu, EMI
	maven { url = "https://maven.shedaniel.me/" } // Cloth Config, REI
	maven { url = "https://mvn.devos.one/snapshots/" } // Create, Porting Lib, Forge Tags, Milk Lib
	maven { url = "https://cursemaven.com" } // Forge Config API Port
	maven { url = "https://maven.tterrag.com/" } // Registrate and Flywheel
	maven { url = "https://maven.cafeteria.dev/releases" } // Fake Player API
	maven { url = "https://maven.jamieswhiteshirt.com/libs-release" } // Reach Entity Attributes
	maven { url = "https://jitpack.io/" } // Mixin Extras, fabric ASM
	maven { url = "https://dvs1.progwml6.com/files/maven/" } // JEI
	maven { url = "https://maven.parchmentmc.org" } // Parchment mappings
}

dependencies {
	// dev environment
	minecraft("com.mojang:minecraft:${project.minecraft_version}")
	mappings(loom.layered {
		it.addLayer(quiltMappings.mappings("org.quiltmc:quilt-mappings:${project.minecraft_version}+build.${project.qm_version}:v2"))
		it.parchment("org.parchmentmc.data:parchment-${project.minecraft_version}:${project.parchment_version}@zip")
		it.officialMojangMappings { nameSyntheticMembers = false }
	})
	modImplementation("net.fabricmc:fabric-loader:${project.loader_version}")
	modLocalRuntime("maven.modrinth:lazydfu:0.1.2") // lazydfu - improves start times
	modLocalRuntime("maven.modrinth:suggestion-tweaker:${project.suggestion_tweaker_version}") // suggestion tweaker - dev QOL, improves command suggestions
	modLocalRuntime("me.shedaniel.cloth:cloth-config-fabric:${project.cloth_config_version}") { exclude(group: "net.fabricmc.fabric-api") } // required for suggestion tweaker and REI
	modLocalRuntime("com.terraformersmc:modmenu:${project.modmenu_version}") { exclude group: "net.fabricmc"; exclude group: "net.fabricmc.fabric-api" } // always good to have

	// recipe viewers
	modRuntimeOnly("dev.architectury:architectury-fabric:${project.architectury_version}") // for REI
	modRuntimeOnly("me.shedaniel.cloth:basic-math:0.6.0") // for REI
	modCompileOnly("me.shedaniel:RoughlyEnoughItems-api-fabric:${project.rei_version}") { transitive = false }
	modCompileOnly("me.shedaniel:RoughlyEnoughItems-fabric:${project.rei_version}") { transitive = false }
	modCompileOnly("dev.emi:emi:${project.emi_version}") { transitive = false }
	modCompileOnly("mezz.jei:jei-${project.minecraft_version}-fabric:${project.jei_version}") { transitive = false }

	def recipeViewer = project.recipe_viewer
	if (recipeViewer == "emi") {
		modLocalRuntime("dev.emi:emi:${project.emi_version}")  { transitive = false }
	} else if (recipeViewer == "jei") {
		deps.modLocalRuntime("mezz.jei:jei-${project.minecraft_version}-fabric:${project.jei_version}") { transitive = false }
	} else if (recipeViewer == "rei") {
		modLocalRuntime("me.shedaniel:RoughlyEnoughItems-fabric:${project.rei_version}") { transitive = false }
	} else {
		println("unknown recipe viewer: $recipeViewer")
	}

	// create setup
	modImplementation("com.simibubi.create:create-fabric-${project.minecraft_version}:${project.create_version}") { transitive = false }
	modImplementation("io.github.fabricators_of_create:Porting-Lib:${project.port_lib_version}+${project.minecraft_version}-dev.${project.port_lib_hash}")
	modImplementation("me.alphamode:ForgeTags:${project.forge_tags_version}")
	modImplementation("com.electronwill.night-config:core:${project.night_config_core_version}")
	modImplementation("com.electronwill.night-config:toml:${project.night_config_toml_version}")
	modImplementation("curse.maven:forge-config-api-port-fabric-547434:${project.config_api_id}") { transitive = false }
	modImplementation("com.tterrag.registrate:Registrate:${project.registrate_version}")
	modImplementation("com.jozufozu.flywheel:flywheel-fabric-${flywheel_minecraft_version}:${project.flywheel_version}")
	modImplementation("com.jamieswhiteshirt:reach-entity-attributes:${project.reach_entity_attributes_version}")
	modImplementation("dev.cafeteria:fake-player-api:${project.fake_player_api_version}")
	modImplementation("io.github.tropheusj:milk-lib:${project.milk_lib_version}")
	implementation("com.google.code.findbugs:jsr305:${project.jsr305_version}")

	// dependencies
	modImplementation("net.fabricmc.fabric-api:fabric-api:${project.fabric_version}")
}

processResources {
	// require dependencies to be the version compiled against or newer
	Map<String, String> properties = new HashMap<>()
	properties.put("version", project.version)
	properties.put("loader_version", project.loader_version)
	properties.put("fabric_version", project.fabric_version)
	properties.put("create_version", project.create_version)
	properties.put("minecraft_version", project.minecraft_version)
	properties.put("java_version", sourceCompatibility)

	properties.forEach((k, v) -> inputs.property(k, v))

	filesMatching("fabric.mod.json") {
		expand properties
	}
}

tasks.withType(JavaCompile).configureEach {
	it.options.release = Integer.parseInt(sourceCompatibility)
}

java {
	withSourcesJar()
}

jar {
	from("LICENSE") {
		rename { "${it}_${project.archivesBaseName}" }
	}
}

publishing {
	publications {
		mavenJava(MavenPublication) {
			from components.java
		}
	}

	// See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
	repositories {
		// Add repositories to publish to here.
		// Notice: This block does NOT have the same function as the block in the top level.
		// The repositories here will be used for publishing your artifact, not for
		// retrieving dependencies.
	}
}
